// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reports.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createReport = `-- name: CreateReport :one
INSERT INTO "reports" (
        uid,
        title,
        type,
        level,
        address,
        status,
        lat,
        lng
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, uid, title, type, level, status, address, lat, lng, "createdAt", "updatedAt"
`

type CreateReportParams struct {
	Uid     uuid.UUID `json:"uid"`
	Title   string    `json:"title"`
	Type    string    `json:"type"`
	Level   string    `json:"level"`
	Address string    `json:"address"`
	Status  string    `json:"status"`
	Lat     float64   `json:"lat"`
	Lng     float64   `json:"lng"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Reports, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.Uid,
		arg.Title,
		arg.Type,
		arg.Level,
		arg.Address,
		arg.Status,
		arg.Lat,
		arg.Lng,
	)
	var i Reports
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Type,
		&i.Level,
		&i.Status,
		&i.Address,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReportBetweenLatAndLng = `-- name: GetReportBetweenLatAndLng :many
SELECT r.id, r.uid, r.title, r.type, r.level, r.status, r.address, r.lat, r.lng, r."createdAt", r."updatedAt",
    u.name
FROM "reports" as r
    LEFT JOIN "users" AS u on r.uid = u.uid
WHERE r.lat BETWEEN $1 AND $2
    AND r.lng BETWEEN $3 AND $4
    AND status = 'opened'
`

type GetReportBetweenLatAndLngParams struct {
	Lat   float64 `json:"lat"`
	Lat_2 float64 `json:"lat_2"`
	Lng   float64 `json:"lng"`
	Lng_2 float64 `json:"lng_2"`
}

type GetReportBetweenLatAndLngRow struct {
	ID        uuid.UUID      `json:"id"`
	Uid       uuid.UUID      `json:"uid"`
	Title     string         `json:"title"`
	Type      string         `json:"type"`
	Level     string         `json:"level"`
	Status    string         `json:"status"`
	Address   string         `json:"address"`
	Lat       float64        `json:"lat"`
	Lng       float64        `json:"lng"`
	CreatedAt time.Time      `json:"createdAt"`
	UpdatedAt time.Time      `json:"updatedAt"`
	Name      sql.NullString `json:"name"`
}

func (q *Queries) GetReportBetweenLatAndLng(ctx context.Context, arg GetReportBetweenLatAndLngParams) ([]GetReportBetweenLatAndLngRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportBetweenLatAndLng,
		arg.Lat,
		arg.Lat_2,
		arg.Lng,
		arg.Lng_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReportBetweenLatAndLngRow{}
	for rows.Next() {
		var i GetReportBetweenLatAndLngRow
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Title,
			&i.Type,
			&i.Level,
			&i.Status,
			&i.Address,
			&i.Lat,
			&i.Lng,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportById = `-- name: GetReportById :one
SELECT id, uid, title, type, level, status, address, lat, lng, "createdAt", "updatedAt"
FROM reports
WHERE id = $1
    AND uid = $2
LIMIT 1
`

type GetReportByIdParams struct {
	ID  uuid.UUID `json:"id"`
	Uid uuid.UUID `json:"uid"`
}

func (q *Queries) GetReportById(ctx context.Context, arg GetReportByIdParams) (Reports, error) {
	row := q.db.QueryRowContext(ctx, getReportById, arg.ID, arg.Uid)
	var i Reports
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Type,
		&i.Level,
		&i.Status,
		&i.Address,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateReportStatusById = `-- name: UpdateReportStatusById :one
UPDATE reports
SET status = $3
WHERE id = $1
    AND uid = $2
RETURNING id, uid, title, type, level, status, address, lat, lng, "createdAt", "updatedAt"
`

type UpdateReportStatusByIdParams struct {
	ID     uuid.UUID `json:"id"`
	Uid    uuid.UUID `json:"uid"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateReportStatusById(ctx context.Context, arg UpdateReportStatusByIdParams) (Reports, error) {
	row := q.db.QueryRowContext(ctx, updateReportStatusById, arg.ID, arg.Uid, arg.Status)
	var i Reports
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Type,
		&i.Level,
		&i.Status,
		&i.Address,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
