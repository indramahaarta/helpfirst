// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reports.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createReport = `-- name: CreateReport :one
INSERT INTO "reports" (
        uid,
        title,
        type,
        level,
        address,
        lat,
        lng
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, uid, title, type, level, address, lat, lng, "createdAt", "updatedAt"
`

type CreateReportParams struct {
	Uid     uuid.UUID `json:"uid"`
	Title   string    `json:"title"`
	Type    string    `json:"type"`
	Level   string    `json:"level"`
	Address string    `json:"address"`
	Lat     float64   `json:"lat"`
	Lng     float64   `json:"lng"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Reports, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.Uid,
		arg.Title,
		arg.Type,
		arg.Level,
		arg.Address,
		arg.Lat,
		arg.Lng,
	)
	var i Reports
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Type,
		&i.Level,
		&i.Address,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReportBetweenLatAndLng = `-- name: GetReportBetweenLatAndLng :many
SELECT id, uid, title, type, level, address, lat, lng, "createdAt", "updatedAt"
FROM "reports"
WHERE lat BETWEEN $1 AND $2
    AND lng BETWEEN $3 AND $4
`

type GetReportBetweenLatAndLngParams struct {
	Lat   float64 `json:"lat"`
	Lat_2 float64 `json:"lat_2"`
	Lng   float64 `json:"lng"`
	Lng_2 float64 `json:"lng_2"`
}

func (q *Queries) GetReportBetweenLatAndLng(ctx context.Context, arg GetReportBetweenLatAndLngParams) ([]Reports, error) {
	rows, err := q.db.QueryContext(ctx, getReportBetweenLatAndLng,
		arg.Lat,
		arg.Lat_2,
		arg.Lng,
		arg.Lng_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reports{}
	for rows.Next() {
		var i Reports
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Title,
			&i.Type,
			&i.Level,
			&i.Address,
			&i.Lat,
			&i.Lng,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
